require 'json'
require 'bundler'
require 'sinatra'
require 'jbuilder'
require 'active_record'
require 'validates_email_format_of'

require_relative 'helpers/simple_helpers'

require_relative 'models/model_user'
require_relative 'models/model_booking'
require_relative 'models/model_resource'


ActiveRecord::Base.establish_connection adapter: 'sqlite3', database: 'db/db.sqlite3'

before do
  content_type 'application/json'
end

get '/resources/:resource_id' do
  resource = Resource.find_by(id: params[:resource_id])

  if resource
    json = {
      name: resource.name,
      description: resource.description,
      links: [
        {
          rel: "self",
          uri: host+"/resource/"+resource.id.to_s
        },
        {
          rel: "bookings",
          uri: host+"/resource/"+resource.id.to_s+"/bookings"
        }
      ]
    }

    {resource: json}.to_json
  else
    halt 404
  end
end


get '/resources' do
  resources = Resource.all.collect{
      |resource| {
        name: resource.name,
        description: resource.description,
        links: [
          rel: "self",
          uri: host+"/resource/"+resource.id.to_s
        ]
      } 
    }

  {resources: resources}.to_json
end

get '/resources/:resource_id/bookings' do
  if params['date']
    date = params['date'].to_time
    halt 400 if not date
  else
    date = Date.today + 1
  end

  limit = params['limit'] ? params['limit'].to_i : 30
  halt 400 if limit > 365

  status = params['status'] ? params['status'] : 'approved'
  halt 400 if not (['approved', 'pending', 'all'].include? status)

  all_bookings = Booking.bookings_between(date, (date + limit))

  bookings = all_bookings.select { |b|
    b.resource_id == params[:resource_id].to_i &&
    status == 'all'? true : b.status == status 
  }

  my_uri = "/resources/#{params[:resource_id]}/bookings/"

  hash_bookings = bookings.map {|b| 
    {
      start:  st_time(b.start_time),
      end:    st_time(b.end_time),
      status: b.status,
      user:   (User.find_by(id: b.user_id)).email,
      links: [
        make_link('self', my_uri + b.id.to_s),
        make_link('resource', "/resources/#{b.resource_id}"),
#        make_link('accept', my_uri + b.id.to_s,'PUT'),
#        {
#          rel: 'reject',
#          uri: 'example.org/resources/3/bookings/9',
#          method: 'DELE'
#        }
        make_link('reject', my_uri + b.id.to_s,'DELETE'),
      ]
    }
  }

  {
    bookings: hash_bookings,
    links: [
      make_link('self', "/resources/#{params[:resource_id]}/bookings?date=#{date}&limit=#{limit}&status=#{status}")
    ]
  }.to_json
end
